namespace Phaser.Sound {
  /**
   * Class containing all the shared state and behavior of a sound object, independent of the implementation.
   */
  class BaseSound extends Phaser.Events.EventEmitter {
    /**
     *
     * @param manager Reference to the current sound manager instance.
     * @param key Asset key for the sound.
     * @param config An optional config object containing default sound settings.
     */
    constructor(manager: Phaser.Sound.BaseSoundManager, key: string, config?: Phaser.Types.Sound.SoundConfig);

    /**
     * Asset key for the sound.
     */
    readonly key: string;

    /**
     * Flag indicating if sound is currently playing.
     */
    readonly isPlaying: boolean;

    /**
     * Flag indicating if sound is currently paused.
     */
    readonly isPaused: boolean;

    /**
     * A property that holds the value of sound's actual playback rate,
     * after its rate and detune values has been combined with global
     * rate and detune values.
     */
    readonly totalRate: number;

    /**
     * A value representing the duration, in seconds.
     * It could be total sound duration or a marker duration.
     */
    readonly duration: number;

    /**
     * The total duration of the sound in seconds.
     */
    readonly totalDuration: number;

    /**
     * Object containing markers definitions.
     */
    readonly markers: {[key: string]:  Phaser.Types.Sound.SoundMarker};

    /**
     * Currently playing marker.
     * 'null' if whole sound is playing.
     */
    readonly currentMarker: Phaser.Types.Sound.SoundMarker;

    /**
     * Adds a marker into the current sound. A marker is represented by name, start time, duration, and optionally config object.
     * This allows you to bundle multiple sounds together into a single audio file and use markers to jump between them for playback.
     * @param marker Marker object.
     */
    addMarker(marker: Phaser.Types.Sound.SoundMarker): boolean;

    /**
     * Updates previously added marker.
     * @param marker Marker object with updated values.
     */
    updateMarker(marker: Phaser.Types.Sound.SoundMarker): boolean;

    /**
     * Removes a marker from the sound.
     * @param markerName The name of the marker to remove.
     */
    removeMarker(markerName: string): Phaser.Types.Sound.SoundMarker;

    /**
     * Play this sound, or a marked section of it.
     * It always plays the sound from the start. If you want to start playback from a specific time
     * you can set 'seek' setting of the config object, provided to this call, to that value.
     * @param markerName If you want to play a marker then provide the marker name here. Alternatively, this parameter can be a SoundConfig object. Default ''.
     * @param config Optional sound config object to be applied to this marker or entire sound if no marker name is provided. It gets memorized for future plays of current section of the sound.
     */
    play(markerName?: string | Phaser.Types.Sound.SoundConfig, config?: Phaser.Types.Sound.SoundConfig): boolean;

    /**
     * Pauses the sound.
     */
    pause(): boolean;

    /**
     * Resumes the sound.
     */
    resume(): boolean;

    /**
     * Stop playing this sound.
     */
    stop(): boolean;

    /**
     * Method used internally for applying config values to some of the sound properties.
     */
    protected applyConfig(): void;

    /**
     * Method used internally for resetting values of some of the config properties.
     */
    protected resetConfig(): void;

    /**
     * Update method called automatically by sound manager on every game step.
     * @param time The current timestamp as generated by the Request Animation Frame or SetTimeout.
     * @param delta The delta time elapsed since the last frame.
     */
    protected update(time: number, delta: number): void;

    /**
     * Method used internally to calculate total playback rate of the sound.
     */
    protected calculateRate(): void;

    /**
     * Destroys this sound and all associated events and marks it for removal from the sound manager.
     */
    destroy(): void;

  }

  /**
   * Base class for other Sound Manager classes.
   */
  class BaseSoundManager extends Phaser.Events.EventEmitter {
    /**
     *
     * @param game Reference to the current game instance.
     */
    constructor(game: Phaser.Game);

    /**
     * Local reference to game.
     */
    readonly game: Phaser.Game;

    /**
     * Local reference to the JSON Cache, as used by Audio Sprites.
     */
    readonly jsonCache: Phaser.Cache.BaseCache;

    /**
     * Global mute setting.
     */
    mute: boolean;

    /**
     * Global volume setting.
     */
    volume: number;

    /**
     * Flag indicating if sounds should be paused when game looses focus,
     * for instance when user switches to another tab/program/app.
     */
    pauseOnBlur: boolean;

    /**
     * Mobile devices require sounds to be triggered from an explicit user action,
     * such as a tap, before any sound can be loaded/played on a web page.
     * Set to true if the audio system is currently locked awaiting user interaction.
     */
    readonly locked: boolean;

    /**
     * Adds a new sound into the sound manager.
     * @param key Asset key for the sound.
     * @param config An optional config object containing default sound settings.
     */
    add(key: string, config?: Phaser.Types.Sound.SoundConfig): Phaser.Sound.BaseSound;

    /**
     * Adds a new audio sprite sound into the sound manager.
     * Audio Sprites are a combination of audio files and a JSON configuration.
     * The JSON follows the format of that created by https://github.com/tonistiigi/audiosprite
     * @param key Asset key for the sound.
     * @param config An optional config object containing default sound settings.
     */
    addAudioSprite(key: string, config?: Phaser.Types.Sound.SoundConfig): Phaser.Sound.HTML5AudioSound | Phaser.Sound.WebAudioSound;

    /**
     * Gets the first sound in the manager matching the given key, if any.
     * @param key Sound asset key.
     */
    get(key: string): Phaser.Sound.BaseSound;

    /**
     * Gets any sounds in the manager matching the given key.
     * @param key Sound asset key.
     */
    getAll(key: string): Phaser.Sound.BaseSound[];

    /**
     * Adds a new sound to the sound manager and plays it.
     * The sound will be automatically removed (destroyed) once playback ends.
     * This lets you play a new sound on the fly without the need to keep a reference to it.
     * @param key Asset key for the sound.
     * @param extra An optional additional object containing settings to be applied to the sound. It could be either config or marker object.
     */
    play(key: string, extra?: Phaser.Types.Sound.SoundConfig | Phaser.Types.Sound.SoundMarker): boolean;

    /**
     * Adds a new audio sprite sound to the sound manager and plays it.
     * The sprite will be automatically removed (destroyed) once playback ends.
     * This lets you play a new sound on the fly without the need to keep a reference to it.
     * @param key Asset key for the sound.
     * @param spriteName The name of the sound sprite to play.
     * @param config An optional config object containing default sound settings.
     */
    playAudioSprite(key: string, spriteName: string, config?: Phaser.Types.Sound.SoundConfig): boolean;

    /**
     * Removes a sound from the sound manager.
     * The removed sound is destroyed before removal.
     * @param sound The sound object to remove.
     */
    remove(sound: Phaser.Sound.BaseSound): boolean;

    /**
     * Removes all sounds from the manager, destroying the sounds.
     */
    removeAll(): void;

    /**
     * Removes all sounds from the sound manager that have an asset key matching the given value.
     * The removed sounds are destroyed before removal.
     * @param key The key to match when removing sound objects.
     */
    removeByKey(key: string): number;

    /**
     * Pauses all the sounds in the game.
     */
    pauseAll(): void;

    /**
     * Resumes all the sounds in the game.
     */
    resumeAll(): void;

    /**
     * Stops all the sounds in the game.
     */
    stopAll(): void;

    /**
     * Stops any sounds matching the given key.
     * @param key Sound asset key.
     */
    stopByKey(key: string): number;

    /**
     * Method used internally for unlocking audio playback on devices that
     * require user interaction before any sound can be played on a web page.
     *
     * Read more about how this issue is handled here in [this article](https://medium.com/@pgoloskokovic/unlocking-web-audio-the-smarter-way-8858218c0e09).
     */
    protected unlock(): void;

    /**
     * Method used internally for pausing sound manager if
     * Phaser.Sound.BaseSoundManager#pauseOnBlur is set to true.
     */
    protected onBlur(): void;

    /**
     * Method used internally for resuming sound manager if
     * Phaser.Sound.BaseSoundManager#pauseOnBlur is set to true.
     */
    protected onFocus(): void;

    /**
     * Update method called on every game step.
     * Removes destroyed sounds and updates every active sound in the game.
     * @param time The current timestamp as generated by the Request Animation Frame or SetTimeout.
     * @param delta The delta time elapsed since the last frame.
     */
    protected update(time: number, delta: number): void;

    /**
     * Destroys all the sounds in the game and all associated events.
     */
    destroy(): void;

    /**
     * Sets the global playback rate at which all the sounds will be played.
     *
     * For example, a value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed
     * and 2.0 doubles the audios playback speed.
     * @param value Global playback rate at which all the sounds will be played.
     */
    setRate(value: number): Phaser.Sound.BaseSoundManager;

    /**
     * Global playback rate at which all the sounds will be played.
     * Value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed
     * and 2.0 doubles the audio's playback speed.
     */
    rate: number;

    /**
     * Sets the global detuning of all sounds in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).
     * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).
     * @param value The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).
     */
    setDetune(value: number): Phaser.Sound.BaseSoundManager;

    /**
     * Global detuning of all sounds in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).
     * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).
     */
    detune: number;

  }

  namespace Events {
    /**
     * The Sound Complete Event.
     *
     * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they complete playback.
     *
     * Listen to it from a Sound instance using `Sound.on('complete', listener)`, i.e.:
     *
     * ```javascript
     * var music = this.sound.add('key');
     * music.on('complete', listener);
     * music.play();
     * ```
     */
    const COMPLETE: any;

    /**
     * The Audio Data Decoded All Event.
     *
     * This event is dispatched by the Web Audio Sound Manager as a result of calling the `decodeAudio` method,
     * once all files passed to the method have been decoded (or errored).
     *
     * Use `Phaser.Sound.Events#DECODED` to listen for single sounds being decoded, and `DECODED_ALL` to
     * listen for them all completing.
     *
     * Listen to it from the Sound Manager in a Scene using `this.sound.on('decodedall', listener)`, i.e.:
     *
     * ```javascript
     * this.sound.once('decodedall', handler);
     * this.sound.decodeAudio([ audioFiles ]);
     * ```
     */
    const DECODED_ALL: any;

    /**
     * The Audio Data Decoded Event.
     *
     * This event is dispatched by the Web Audio Sound Manager as a result of calling the `decodeAudio` method.
     *
     * Listen to it from the Sound Manager in a Scene using `this.sound.on('decoded', listener)`, i.e.:
     *
     * ```javascript
     * this.sound.on('decoded', handler);
     * this.sound.decodeAudio(key, audioData);
     * ```
     */
    const DECODED: any;

    /**
     * The Sound Destroy Event.
     *
     * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they are destroyed, either
     * directly or via a Sound Manager.
     *
     * Listen to it from a Sound instance using `Sound.on('destroy', listener)`, i.e.:
     *
     * ```javascript
     * var music = this.sound.add('key');
     * music.on('destroy', listener);
     * music.destroy();
     * ```
     */
    const DESTROY: any;

    /**
     * The Sound Detune Event.
     *
     * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when their detune value changes.
     *
     * Listen to it from a Sound instance using `Sound.on('detune', listener)`, i.e.:
     *
     * ```javascript
     * var music = this.sound.add('key');
     * music.on('detune', listener);
     * music.play();
     * music.setDetune(200);
     * ```
     */
    const DETUNE: any;

    /**
     * The Sound Manager Global Detune Event.
     *
     * This event is dispatched by the Base Sound Manager, or more typically, an instance of the Web Audio Sound Manager,
     * or the HTML5 Audio Manager. It is dispatched when the `detune` property of the Sound Manager is changed, which globally
     * adjusts the detuning of all active sounds.
     *
     * Listen to it from a Scene using: `this.sound.on('rate', listener)`.
     */
    const GLOBAL_DETUNE: any;

    /**
     * The Sound Manager Global Mute Event.
     *
     * This event is dispatched by the Sound Manager when its `mute` property is changed, either directly
     * or via the `setMute` method. This changes the mute state of all active sounds.
     *
     * Listen to it from a Scene using: `this.sound.on('mute', listener)`.
     */
    const GLOBAL_MUTE: any;

    /**
     * The Sound Manager Global Rate Event.
     *
     * This event is dispatched by the Base Sound Manager, or more typically, an instance of the Web Audio Sound Manager,
     * or the HTML5 Audio Manager. It is dispatched when the `rate` property of the Sound Manager is changed, which globally
     * adjusts the playback rate of all active sounds.
     *
     * Listen to it from a Scene using: `this.sound.on('rate', listener)`.
     */
    const GLOBAL_RATE: any;

    /**
     * The Sound Manager Global Volume Event.
     *
     * This event is dispatched by the Sound Manager when its `volume` property is changed, either directly
     * or via the `setVolume` method. This changes the volume of all active sounds.
     *
     * Listen to it from a Scene using: `this.sound.on('volume', listener)`.
     */
    const GLOBAL_VOLUME: any;

    /**
     * The Sound Looped Event.
     *
     * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they loop during playback.
     *
     * Listen to it from a Sound instance using `Sound.on('looped', listener)`, i.e.:
     *
     * ```javascript
     * var music = this.sound.add('key');
     * music.on('looped', listener);
     * music.setLoop(true);
     * music.play();
     * ```
     *
     * This is not to be confused with the [LOOP]{@linkcode Phaser.Sound.Events#event:LOOP} event, which only emits when the loop state of a Sound is changed.
     */
    const LOOPED: any;

    /**
     * The Sound Loop Event.
     *
     * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when their loop state is changed.
     *
     * Listen to it from a Sound instance using `Sound.on('loop', listener)`, i.e.:
     *
     * ```javascript
     * var music = this.sound.add('key');
     * music.on('loop', listener);
     * music.setLoop(true);
     * ```
     *
     * This is not to be confused with the [LOOPED]{@linkcode Phaser.Sound.Events#event:LOOPED} event, which emits each time a Sound loops during playback.
     */
    const LOOP: any;

    /**
     * The Sound Mute Event.
     *
     * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when their mute state changes.
     *
     * Listen to it from a Sound instance using `Sound.on('mute', listener)`, i.e.:
     *
     * ```javascript
     * var music = this.sound.add('key');
     * music.on('mute', listener);
     * music.play();
     * music.setMute(true);
     * ```
     */
    const MUTE: any;

    /**
     * The Sound Pan Event.
     *
     * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when their pan changes.
     *
     * Listen to it from a Sound instance using `Sound.on('pan', listener)`, i.e.:
     *
     * ```javascript
     * var sound = this.sound.add('key');
     * sound.on('pan', listener);
     * sound.play();
     * sound.setPan(0.5);
     * ```
     */
    const PAN: any;

    /**
     * The Pause All Sounds Event.
     *
     * This event is dispatched by the Base Sound Manager, or more typically, an instance of the Web Audio Sound Manager,
     * or the HTML5 Audio Manager. It is dispatched when the `pauseAll` method is invoked and after all current Sounds
     * have been paused.
     *
     * Listen to it from a Scene using: `this.sound.on('pauseall', listener)`.
     */
    const PAUSE_ALL: any;

    /**
     * The Sound Pause Event.
     *
     * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they are paused.
     *
     * Listen to it from a Sound instance using `Sound.on('pause', listener)`, i.e.:
     *
     * ```javascript
     * var music = this.sound.add('key');
     * music.on('pause', listener);
     * music.play();
     * music.pause();
     * ```
     */
    const PAUSE: any;

    /**
     * The Sound Play Event.
     *
     * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they are played.
     *
     * Listen to it from a Sound instance using `Sound.on('play', listener)`, i.e.:
     *
     * ```javascript
     * var music = this.sound.add('key');
     * music.on('play', listener);
     * music.play();
     * ```
     */
    const PLAY: any;

    /**
     * The Sound Rate Change Event.
     *
     * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when their rate changes.
     *
     * Listen to it from a Sound instance using `Sound.on('rate', listener)`, i.e.:
     *
     * ```javascript
     * var music = this.sound.add('key');
     * music.on('rate', listener);
     * music.play();
     * music.setRate(0.5);
     * ```
     */
    const RATE: any;

    /**
     * The Resume All Sounds Event.
     *
     * This event is dispatched by the Base Sound Manager, or more typically, an instance of the Web Audio Sound Manager,
     * or the HTML5 Audio Manager. It is dispatched when the `resumeAll` method is invoked and after all current Sounds
     * have been resumed.
     *
     * Listen to it from a Scene using: `this.sound.on('resumeall', listener)`.
     */
    const RESUME_ALL: any;

    /**
     * The Sound Resume Event.
     *
     * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they are resumed from a paused state.
     *
     * Listen to it from a Sound instance using `Sound.on('resume', listener)`, i.e.:
     *
     * ```javascript
     * var music = this.sound.add('key');
     * music.on('resume', listener);
     * music.play();
     * music.pause();
     * music.resume();
     * ```
     */
    const RESUME: any;

    /**
     * The Sound Seek Event.
     *
     * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they are seeked to a new position.
     *
     * Listen to it from a Sound instance using `Sound.on('seek', listener)`, i.e.:
     *
     * ```javascript
     * var music = this.sound.add('key');
     * music.on('seek', listener);
     * music.play();
     * music.setSeek(5000);
     * ```
     */
    const SEEK: any;

    /**
     * The Stop All Sounds Event.
     *
     * This event is dispatched by the Base Sound Manager, or more typically, an instance of the Web Audio Sound Manager,
     * or the HTML5 Audio Manager. It is dispatched when the `stopAll` method is invoked and after all current Sounds
     * have been stopped.
     *
     * Listen to it from a Scene using: `this.sound.on('stopall', listener)`.
     */
    const STOP_ALL: any;

    /**
     * The Sound Stop Event.
     *
     * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when they are stopped.
     *
     * Listen to it from a Sound instance using `Sound.on('stop', listener)`, i.e.:
     *
     * ```javascript
     * var music = this.sound.add('key');
     * music.on('stop', listener);
     * music.play();
     * music.stop();
     * ```
     */
    const STOP: any;

    /**
     * The Sound Manager Unlocked Event.
     *
     * This event is dispatched by the Base Sound Manager, or more typically, an instance of the Web Audio Sound Manager,
     * or the HTML5 Audio Manager. It is dispatched during the update loop when the Sound Manager becomes unlocked. For
     * Web Audio this is on the first user gesture on the page.
     *
     * Listen to it from a Scene using: `this.sound.on('unlocked', listener)`.
     */
    const UNLOCKED: any;

    /**
     * The Sound Volume Event.
     *
     * This event is dispatched by both Web Audio and HTML5 Audio Sound objects when their volume changes.
     *
     * Listen to it from a Sound instance using `Sound.on('volume', listener)`, i.e.:
     *
     * ```javascript
     * var music = this.sound.add('key');
     * music.on('volume', listener);
     * music.play();
     * music.setVolume(0.5);
     * ```
     */
    const VOLUME: any;

  }

  /**
   * HTML5 Audio implementation of the sound.
   */
  class HTML5AudioSound extends Phaser.Sound.BaseSound {
    /**
     *
     * @param manager Reference to the current sound manager instance.
     * @param key Asset key for the sound.
     * @param config An optional config object containing default sound settings. Default {}.
     */
    constructor(manager: Phaser.Sound.HTML5AudioSoundManager, key: string, config?: Phaser.Types.Sound.SoundConfig);

    /**
     * Play this sound, or a marked section of it.
     * It always plays the sound from the start. If you want to start playback from a specific time
     * you can set 'seek' setting of the config object, provided to this call, to that value.
     * @param markerName If you want to play a marker then provide the marker name here. Alternatively, this parameter can be a SoundConfig object. Default ''.
     * @param config Optional sound config object to be applied to this marker or entire sound if no marker name is provided. It gets memorized for future plays of current section of the sound.
     */
    play(markerName?: string | Phaser.Types.Sound.SoundConfig, config?: Phaser.Types.Sound.SoundConfig): boolean;

    /**
     * Pauses the sound.
     */
    pause(): boolean;

    /**
     * Resumes the sound.
     */
    resume(): boolean;

    /**
     * Stop playing this sound.
     */
    stop(): boolean;

    /**
     * Update method called automatically by sound manager on every game step.
     * @param time The current timestamp as generated by the Request Animation Frame or SetTimeout.
     */
    protected update(time: number): void;

    /**
     * Calls Phaser.Sound.BaseSound#destroy method
     * and cleans up all HTML5 Audio related stuff.
     */
    destroy(): void;

    /**
     * Method used internally to calculate total playback rate of the sound.
     */
    protected calculateRate(): void;

    /**
     * Boolean indicating whether the sound is muted or not.
     * Gets or sets the muted state of this sound.
     */
    mute: boolean;

    /**
     * Sets the muted state of this Sound.
     * @param value `true` to mute this sound, `false` to unmute it.
     */
    setMute(value: boolean): this;

    /**
     * Gets or sets the volume of this sound, a value between 0 (silence) and 1 (full volume).
     */
    volume: number;

    /**
     * Sets the volume of this Sound.
     * @param value The volume of the sound.
     */
    setVolume(value: number): this;

    /**
     * Rate at which this Sound will be played.
     * Value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed
     * and 2.0 doubles the audios playback speed.
     */
    rate: number;

    /**
     * Sets the playback rate of this Sound.
     *
     * For example, a value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed
     * and 2.0 doubles the audios playback speed.
     * @param value The playback rate at of this Sound.
     */
    setRate(value: number): this;

    /**
     * The detune value of this Sound, given in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).
     * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).
     */
    detune: number;

    /**
     * Sets the detune value of this Sound, given in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).
     * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).
     * @param value The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).
     */
    setDetune(value: number): this;

    /**
     * Property representing the position of playback for this sound, in seconds.
     * Setting it to a specific value moves current playback to that position.
     * The value given is clamped to the range 0 to current marker duration.
     * Setting seek of a stopped sound has no effect.
     */
    seek: number;

    /**
     * Seeks to a specific point in this sound.
     * @param value The point in the sound to seek to.
     */
    setSeek(value: number): this;

    /**
     * Flag indicating whether or not the sound or current sound marker will loop.
     */
    loop: boolean;

    /**
     * Sets the loop state of this Sound.
     * @param value `true` to loop this sound, `false` to not loop it.
     */
    setLoop(value: boolean): Phaser.Sound.HTML5AudioSound;

    /**
     * Gets or sets the pan of this sound, a value between -1 (full left pan) and 1 (full right pan).
     *
     * Has no audible effect on HTML5 Audio Sound, but still generates the PAN Event.
     */
    pan: number;

    /**
     * Sets the pan of this sound, a value between -1 (full left pan) and 1 (full right pan).
     *
     * Has no audible effect on HTML5 Audio Sound, but still generates the PAN Event.
     * @param value The pan of the sound. A value between -1 (full left pan) and 1 (full right pan).
     */
    setPan(value: number): this;

  }

  /**
   * HTML5AudioSoundManager
   */
  class HTML5AudioSoundManager extends Phaser.Sound.BaseSoundManager {
    /**
     *
     * @param game Reference to the current game instance.
     */
    constructor(game: Phaser.Game);

    /**
     * Flag indicating whether if there are no idle instances of HTML5 Audio tag,
     * for any particular sound, if one of the used tags should be hijacked and used
     * for succeeding playback or if succeeding Phaser.Sound.HTML5AudioSound#play
     * call should be ignored.
     */
    override: boolean;

    /**
     * Value representing time difference, in seconds, between calling
     * play method on an audio tag and when it actually starts playing.
     * It is used to achieve more accurate delayed sound playback.
     *
     * You might need to tweak this value to get the desired results
     * since audio play delay varies depending on the browser/platform.
     */
    audioPlayDelay: number;

    /**
     * A value by which we should offset the loop end marker of the
     * looping sound to compensate for lag, caused by changing audio
     * tag playback position, in order to achieve gapless looping.
     *
     * You might need to tweak this value to get the desired results
     * since loop lag varies depending on the browser/platform.
     */
    loopEndOffset: number;

    /**
     * Adds a new sound into the sound manager.
     * @param key Asset key for the sound.
     * @param config An optional config object containing default sound settings.
     */
    add(key: string, config?: Phaser.Types.Sound.SoundConfig): Phaser.Sound.HTML5AudioSound;

    /**
     * Unlocks HTML5 Audio loading and playback on mobile
     * devices on the initial explicit user interaction.
     */
    unlock(): void;

    /**
     * Method used internally for pausing sound manager if
     * Phaser.Sound.HTML5AudioSoundManager#pauseOnBlur is set to true.
     */
    protected onBlur(): void;

    /**
     * Method used internally for resuming sound manager if
     * Phaser.Sound.HTML5AudioSoundManager#pauseOnBlur is set to true.
     */
    protected onFocus(): void;

    /**
     * Calls Phaser.Sound.BaseSoundManager#destroy method
     * and cleans up all HTML5 Audio related stuff.
     */
    destroy(): void;

    /**
     * Method used internally by Phaser.Sound.HTML5AudioSound class methods and property setters
     * to check if sound manager is locked and then either perform action immediately or queue it
     * to be performed once the sound manager gets unlocked.
     * @param sound Sound object on which to perform queued action.
     * @param prop Name of the method to be called or property to be assigned a value to.
     * @param value An optional parameter that either holds an array of arguments to be passed to the method call or value to be set to the property.
     */
    protected isLocked(sound: Phaser.Sound.HTML5AudioSound, prop: string, value?: any): boolean;

    /**
     * Sets the muted state of all this Sound Manager.
     * @param value `true` to mute all sounds, `false` to unmute them.
     */
    setMute(value: boolean): Phaser.Sound.HTML5AudioSoundManager;

    mute: boolean;

    /**
     * Sets the volume of this Sound Manager.
     * @param value The global volume of this Sound Manager.
     */
    setVolume(value: number): Phaser.Sound.HTML5AudioSoundManager;

    volume: number;

  }

  /**
   * No audio implementation of the sound. It is used if audio has been
   * disabled in the game config or the device doesn't support any audio.
   *
   * It represents a graceful degradation of sound logic that provides
   * minimal functionality and prevents Phaser projects that use audio from
   * breaking on devices that don't support any audio playback technologies.
   */
  class NoAudioSound {
    /**
     *
     * @param manager Reference to the current sound manager instance.
     * @param key Asset key for the sound.
     * @param config An optional config object containing default sound settings. Default {}.
     */
    constructor(manager: Phaser.Sound.NoAudioSoundManager, key: string, config?: Phaser.Types.Sound.SoundConfig);

    /**
     *
     * @param marker Marker object.
     */
    addMarker(marker: Phaser.Types.Sound.SoundMarker): boolean;

    /**
     *
     * @param marker Marker object with updated values.
     */
    updateMarker(marker: Phaser.Types.Sound.SoundMarker): boolean;

    /**
     *
     * @param markerName The name of the marker to remove.
     */
    removeMarker(markerName: string): null;

    /**
     *
     * @param markerName If you want to play a marker then provide the marker name here. Alternatively, this parameter can be a SoundConfig object. Default ''.
     * @param config Optional sound config object to be applied to this marker or entire sound if no marker name is provided. It gets memorized for future plays of current section of the sound.
     */
    play(markerName?: string | Phaser.Types.Sound.SoundConfig, config?: Phaser.Types.Sound.SoundConfig): boolean;

    pause(): boolean;

    /**
     * Resumes the sound.
     */
    resume(): boolean;

    /**
     * Stop playing this sound.
     */
    stop(): boolean;

    /**
     * Destroys this sound and all associated events and marks it for removal from the sound manager.
     */
    destroy(): void;

  }

  /**
   * No-audio implementation of the Sound Manager. It is used if audio has been
   * disabled in the game config or the device doesn't support any audio.
   *
   * It represents a graceful degradation of Sound Manager logic that provides
   * minimal functionality and prevents Phaser projects that use audio from
   * breaking on devices that don't support any audio playback technologies.
   */
  class NoAudioSoundManager extends Phaser.Sound.BaseSoundManager {
    /**
     *
     * @param game Reference to the current game instance.
     */
    constructor(game: Phaser.Game);

  }

  /**
   * Creates a Web Audio, HTML5 Audio or No Audio Sound Manager based on config and device settings.
   *
   * Be aware of https://developers.google.com/web/updates/2017/09/autoplay-policy-changes
   * @param game Reference to the current game instance.
   */
  function SoundManagerCreator(game: Phaser.Game): Phaser.Sound.HTML5AudioSoundManager | Phaser.Sound.WebAudioSoundManager | Phaser.Sound.NoAudioSoundManager;

  /**
   * Web Audio API implementation of the sound.
   */
  class WebAudioSound extends Phaser.Sound.BaseSound {
    /**
     *
     * @param manager Reference to the current sound manager instance.
     * @param key Asset key for the sound.
     * @param config An optional config object containing default sound settings. Default {}.
     */
    constructor(manager: Phaser.Sound.WebAudioSoundManager, key: string, config?: Phaser.Types.Sound.SoundConfig);

    /**
     * Audio buffer containing decoded data of the audio asset to be played.
     */
    audioBuffer: AudioBuffer;

    /**
     * A reference to an audio source node used for playing back audio from
     * audio data stored in Phaser.Sound.WebAudioSound#audioBuffer.
     */
    source: AudioBufferSourceNode;

    /**
     * A reference to a second audio source used for gapless looped playback.
     */
    loopSource: AudioBufferSourceNode;

    /**
     * Gain node responsible for controlling this sound's muting.
     */
    muteNode: GainNode;

    /**
     * Gain node responsible for controlling this sound's volume.
     */
    volumeNode: GainNode;

    /**
     * Panner node responsible for controlling this sound's pan.
     *
     * Doesn't work on iOS / Safari.
     */
    pannerNode: StereoPannerNode;

    /**
     * Used for keeping track when sound source playback has ended
     * so its state can be updated accordingly.
     */
    readonly hasEnded: boolean;

    /**
     * Used for keeping track when sound source has looped
     * so its state can be updated accordingly.
     */
    readonly hasLooped: boolean;

    /**
     * Play this sound, or a marked section of it.
     *
     * It always plays the sound from the start. If you want to start playback from a specific time
     * you can set 'seek' setting of the config object, provided to this call, to that value.
     * @param markerName If you want to play a marker then provide the marker name here. Alternatively, this parameter can be a SoundConfig object. Default ''.
     * @param config Optional sound config object to be applied to this marker or entire sound if no marker name is provided. It gets memorized for future plays of current section of the sound.
     */
    play(markerName?: string | Phaser.Types.Sound.SoundConfig, config?: Phaser.Types.Sound.SoundConfig): boolean;

    /**
     * Pauses the sound.
     */
    pause(): boolean;

    /**
     * Resumes the sound.
     */
    resume(): boolean;

    /**
     * Stop playing this sound.
     */
    stop(): boolean;

    /**
     * Method used internally for applying config values to some of the sound properties.
     */
    protected applyConfig(): void;

    /**
     * Update method called automatically by sound manager on every game step.
     */
    protected update(): void;

    /**
     * Calls Phaser.Sound.BaseSound#destroy method
     * and cleans up all Web Audio API related stuff.
     */
    destroy(): void;

    /**
     * Method used internally to calculate total playback rate of the sound.
     */
    protected calculateRate(): void;

    /**
     * Rate at which this Sound will be played.
     * Value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed
     * and 2.0 doubles the audios playback speed.
     */
    rate: number;

    /**
     * Sets the playback rate of this Sound.
     *
     * For example, a value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed
     * and 2.0 doubles the audios playback speed.
     * @param value The playback rate at of this Sound.
     */
    setRate(value: number): this;

    /**
     * The detune value of this Sound, given in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).
     * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).
     */
    detune: number;

    /**
     * Sets the detune value of this Sound, given in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).
     * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).
     * @param value The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).
     */
    setDetune(value: number): this;

    /**
     * Boolean indicating whether the sound is muted or not.
     * Gets or sets the muted state of this sound.
     */
    mute: boolean;

    /**
     * Sets the muted state of this Sound.
     * @param value `true` to mute this sound, `false` to unmute it.
     */
    setMute(value: boolean): this;

    /**
     * Gets or sets the volume of this sound, a value between 0 (silence) and 1 (full volume).
     */
    volume: number;

    /**
     * Sets the volume of this Sound.
     * @param value The volume of the sound.
     */
    setVolume(value: number): this;

    /**
     * Property representing the position of playback for this sound, in seconds.
     * Setting it to a specific value moves current playback to that position.
     * The value given is clamped to the range 0 to current marker duration.
     * Setting seek of a stopped sound has no effect.
     */
    seek: number;

    /**
     * Seeks to a specific point in this sound.
     * @param value The point in the sound to seek to.
     */
    setSeek(value: number): this;

    /**
     * Flag indicating whether or not the sound or current sound marker will loop.
     */
    loop: boolean;

    /**
     * Sets the loop state of this Sound.
     * @param value `true` to loop this sound, `false` to not loop it.
     */
    setLoop(value: boolean): this;

    /**
     * Gets or sets the pan of this sound, a value between -1 (full left pan) and 1 (full right pan).
     *
     * Always returns zero on iOS / Safari as it doesn't support the stereo panner node.
     */
    pan: number;

    /**
     * Sets the pan of this sound, a value between -1 (full left pan) and 1 (full right pan).
     *
     * Note: iOS / Safari doesn't support the stereo panner node.
     * @param value The pan of the sound. A value between -1 (full left pan) and 1 (full right pan).
     */
    setPan(value: number): this;

  }

  /**
   * Web Audio API implementation of the Sound Manager.
   *
   * Not all browsers can play all audio formats.
   *
   * There is a good guide to what's supported: [Cross-browser audio basics: Audio codec support](https://developer.mozilla.org/en-US/Apps/Fundamentals/Audio_and_video_delivery/Cross-browser_audio_basics#Audio_Codec_Support).
   */
  class WebAudioSoundManager extends Phaser.Sound.BaseSoundManager {
    /**
     *
     * @param game Reference to the current game instance.
     */
    constructor(game: Phaser.Game);

    /**
     * The AudioContext being used for playback.
     */
    context: AudioContext;

    /**
     * Gain node responsible for controlling global muting.
     */
    masterMuteNode: GainNode;

    /**
     * Gain node responsible for controlling global volume.
     */
    masterVolumeNode: GainNode;

    /**
     * Destination node for connecting individual sounds to.
     */
    destination: AudioNode;

    /**
     * Method responsible for instantiating and returning AudioContext instance.
     * If an instance of an AudioContext class was provided through the game config,
     * that instance will be returned instead. This can come in handy if you are reloading
     * a Phaser game on a page that never properly refreshes (such as in an SPA project)
     * and you want to reuse already instantiated AudioContext.
     * @param game Reference to the current game instance.
     */
    createAudioContext(game: Phaser.Game): AudioContext;

    /**
     * This method takes a new AudioContext reference and then sets
     * this Sound Manager to use that context for all playback.
     *
     * As part of this call it also disconnects the master mute and volume
     * nodes and then re-creates them on the new given context.
     * @param context Reference to an already created AudioContext instance.
     */
    setAudioContext(context: AudioContext): this;

    /**
     * Adds a new sound into the sound manager.
     * @param key Asset key for the sound.
     * @param config An optional config object containing default sound settings.
     */
    add(key: string, config?: Phaser.Types.Sound.SoundConfig): Phaser.Sound.WebAudioSound;

    /**
     * Decode audio data into a format ready for playback via Web Audio.
     *
     * The audio data can be a base64 encoded string, an audio media-type data uri, or an ArrayBuffer instance.
     *
     * The `audioKey` is the key that will be used to save the decoded audio to the audio cache.
     *
     * Instead of passing a single entry you can instead pass an array of `Phaser.Types.Sound.DecodeAudioConfig`
     * objects as the first and only argument.
     *
     * Decoding is an async process, so be sure to listen for the events to know when decoding has completed.
     *
     * Once the audio has decoded it can be added to the Sound Manager or played via its key.
     * @param audioKey The string-based key to be used to reference the decoded audio in the audio cache, or an array of audio config objects.
     * @param audioData The audio data, either a base64 encoded string, an audio media-type data uri, or an ArrayBuffer instance.
     */
    decodeAudio(audioKey?: Phaser.Types.Sound.DecodeAudioConfig[] | string, audioData?: ArrayBuffer | string): void;

    /**
     * Unlocks Web Audio API on the initial input event.
     *
     * Read more about how this issue is handled here in [this article](https://medium.com/@pgoloskokovic/unlocking-web-audio-the-smarter-way-8858218c0e09).
     */
    unlock(): void;

    /**
     * Method used internally for pausing sound manager if
     * Phaser.Sound.WebAudioSoundManager#pauseOnBlur is set to true.
     */
    protected onBlur(): void;

    /**
     * Method used internally for resuming sound manager if
     * Phaser.Sound.WebAudioSoundManager#pauseOnBlur is set to true.
     */
    protected onFocus(): void;

    /**
     * Update method called on every game step.
     * Removes destroyed sounds and updates every active sound in the game.
     * @param time The current timestamp as generated by the Request Animation Frame or SetTimeout.
     * @param delta The delta time elapsed since the last frame.
     */
    protected update(time: number, delta: number): void;

    /**
     * Calls Phaser.Sound.BaseSoundManager#destroy method
     * and cleans up all Web Audio API related stuff.
     */
    destroy(): void;

    /**
     * Sets the muted state of all this Sound Manager.
     * @param value `true` to mute all sounds, `false` to unmute them.
     */
    setMute(value: boolean): Phaser.Sound.WebAudioSoundManager;

    mute: boolean;

    /**
     * Sets the volume of this Sound Manager.
     * @param value The global volume of this Sound Manager.
     */
    setVolume(value: number): Phaser.Sound.WebAudioSoundManager;

    volume: number;

  }

}