import { PresenceOpts, PresenceOnJoinCallback, PresenceOnLeaveCallback } from 'phoenix';
import RealtimeChannel from './RealtimeChannel';
declare type Presence = {
    presence_id: string;
    [key: string]: any;
};
declare type PresenceState = {
    [key: string]: Presence[];
};
declare type PresenceDiff = {
    joins: PresenceState;
    leaves: PresenceState;
};
declare type RawPresenceState = {
    [key: string]: Record<'metas', {
        phx_ref?: string;
        phx_ref_prev?: string;
        [key: string]: any;
    }[]>;
};
declare type RawPresenceDiff = {
    joins: RawPresenceState;
    leaves: RawPresenceState;
};
declare type PresenceChooser<T> = (key: string, presences: any) => T;
export default class RealtimePresence {
    channel: RealtimeChannel;
    state: PresenceState;
    pendingDiffs: RawPresenceDiff[];
    joinRef: string | null;
    caller: {
        onJoin: PresenceOnJoinCallback;
        onLeave: PresenceOnLeaveCallback;
        onSync: () => void;
    };
    /**
     * Initializes the Presence.
     *
     * @param channel - The RealtimeSubscription
     * @param opts - The options,
     *        for example `{events: {state: 'state', diff: 'diff'}}`
     */
    constructor(channel: RealtimeChannel, opts?: PresenceOpts);
    /**
     * Used to sync the list of presences on the server with the
     * client's state.
     *
     * An optional `onJoin` and `onLeave` callback can be provided to
     * react to changes in the client's local presences across
     * disconnects and reconnects with the server.
     */
    static syncState(currentState: PresenceState, newState: RawPresenceState | PresenceState, onJoin: PresenceOnJoinCallback, onLeave: PresenceOnLeaveCallback): PresenceState;
    /**
     * Used to sync a diff of presence join and leave events from the
     * server, as they happen.
     *
     * Like `syncState`, `syncDiff` accepts optional `onJoin` and
     * `onLeave` callbacks to react to a user joining or leaving from a
     * device.
     */
    static syncDiff(state: PresenceState, diff: RawPresenceDiff | PresenceDiff, onJoin: PresenceOnJoinCallback, onLeave: PresenceOnLeaveCallback): PresenceState;
    /**
     * Returns the array of presences, with selected metadata.
     */
    static list<T = any>(presences: PresenceState, chooser: PresenceChooser<T> | undefined): T[];
    private static map;
    /**
     * Remove 'metas' key
     * Change 'phx_ref' to 'presence_id'
     * Remove 'phx_ref' and 'phx_ref_prev'
     *
     * @example
     * // returns {
     *  abc123: [
     *    { presence_id: '2', user_id: 1 },
     *    { presence_id: '3', user_id: 2 }
     *  ]
     * }
     * RealtimePresence.transformState({
     *  abc123: {
     *    metas: [
     *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },
     *      { phx_ref: '3', user_id: 2 }
     *    ]
     *  }
     * })
     */
    private static transformState;
    private static cloneDeep;
    onJoin(callback: PresenceOnJoinCallback): void;
    onLeave(callback: PresenceOnLeaveCallback): void;
    onSync(callback: () => void): void;
    list<T = any>(by?: PresenceChooser<T>): T[];
    private inPendingSyncState;
}
export {};
//# sourceMappingURL=RealtimePresence.d.ts.map